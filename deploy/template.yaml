AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  di-devplatform-performance

  Performance Testing Framework for Load Testing

Conditions:
  UsePermissionsBoundary:
    Fn::Not:
      - Fn::Equals:
          - !Ref PermissionsBoundary
          - "none"


Mappings:
  LoadTesters:
    AllEnvironments:
      principals:
        - "arn:aws:iam::622626885786:user/***REMOVED***"
        - "arn:aws:iam::622626885786:user/***REMOVED***"
        - "arn:aws:iam::622626885786:user/***REMOVED***"
        - "arn:aws:iam::622626885786:user/***REMOVED***"
        - "arn:aws:iam::622626885786:user/***REMOVED***"
        - "arn:aws:iam::622626885786:user/***REMOVED***"
        - "arn:aws:iam::622626885786:user/***REMOVED***"

# The IP address blocks below are referenced from here:
# https://sites.google.com/a/digital.cabinet-office.gov.uk/gds/working-at-gds/gds-internal-it/gds-internal-it-network-public-ip-addresses
      officeIpAddresses:
        - 213.86.153.211/32
        - 213.86.153.212/32
        - 213.86.153.213/32
        - 213.86.153.214/32
        - 213.86.153.231/32
        - 213.86.153.235/32
        - 213.86.153.236/32
        - 213.86.153.237/32
        - 51.149.8.0/25
        - 51.149.8.128/29


Parameters:
  Environment:
    Description: "The name of the environment to deploy to"
    Type: "String"
    AllowedValues:
      - build
      - staging
  PermissionsBoundary:
    Description: "The ARN of the permissions boundary to apply when creating IAM roles"
    Type: String
    Default: "none"


Resources:
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-PerformanceTester"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              AWS: !FindInMap [LoadTesters, AllEnvironments, principals]
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: true
              IpAddress:
                aws:SourceIp: !FindInMap [LoadTesters, AllEnvironments, officeIpAddresses]
          - Effect: "Allow"
            Principal:
              Service: "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeBuildDeveloperAccess
      PermissionsBoundary: !If [
          UsePermissionsBoundary,
          !Ref PermissionsBoundary,
          !Ref AWS::NoValue,
        ]

  CodeBuildServicePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-CodeBuildServicePolicy-${Environment}
      Roles:
        - !Ref CodeBuildServiceRole
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogGroups
              - logs:DescribeLogStreams
              - logs:PutLogEvents
            Resource:
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*"
              - !Sub "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:*:*"
          - Effect: "Allow"
            Action:
              - "ecr:BatchCheckLayerAvailability"
              - "ecr:BatchGetImage"
              - "ecr:GetDownloadUrlForLayer"
            Resource:
              - !Sub "arn:${AWS::Partition}:ecr:${AWS::Region}:*:repository/*"
          - Effect: "Allow"
            Action:
              - "ecr:GetAuthorizationToken"
            Resource:
              - "*"
          - Effect: Allow
            Action:
              - ecs:RegisterTaskDefinition
            Resource: "*"
          - Effect: Allow
            Action:
              - codebuild:CreateReportGroup
              - codebuild:CreateReport
              - codebuild:UpdateReport
              - codebuild:BatchPutTestCases
            Resource: !Sub "arn:aws:codebuild:${AWS::Region}:${AWS::AccountId}:report-group/${LoadTestCodeBuildProject}-*"
          - Effect: Allow
            Action:
              - iam:PassRole
            Resource: !GetAtt CodeBuildServiceRole.Arn
          - Effect: "Allow"
            Action:
              - "s3:ListAllMyBuckets"
            Resource:
              - !Sub "arn:${AWS::Partition}:s3:::*"
              - !Sub "arn:${AWS::Partition}:s3:::*/*"
            Condition:
              StringEquals:
                "s3:ResourceAccount":
                  - !Sub "${AWS::AccountId}"
          - Effect: "Allow"
            Action:
              - "cloudformation:DescribeStacks"
            Resource:
              - !Sub "arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/*/*"
          - Effect: "Allow"
            Action:
              - "ssm:GetParameters"
              - "ssm:GetParametersByPath"
            Resource:
              - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/perfTest/*" #Create the parameters in AWS Systems Manager Parameter store under this path

  TestUserPasswordParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Perf Test User Password"
      Name: "/perfTest/testUserPassword"
      Type: String
      Value: " "
      Tags:
        Name: !Join
          - "-"
          - - !Ref AWS::StackName
            - "LoadTestCodeBuildProject"
        Service: "ci/cd"
        Source: "alphagov/di-accounts-performance"
  
  AuthAppParameter:
    Type: AWS::SSM::Parameter
    Properties:
      Description: "Perf Auth App Secret"
      Name: "/perfTest/authAppKey"
      Type: String
      Value: " "
      Tags:
        Name: !Join
          - "-"
          - - !Ref AWS::StackName
            - "LoadTestCodeBuildProject"
        Service: "ci/cd"
        Source: "alphagov/di-accounts-performance"

  LoadTestCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "LoadTest-${AWS::StackName}"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: "NO_ARTIFACTS" # Needs changing to GH in build, and promote bucket in staging.
      Environment:
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "CONTAINER-IMAGE-PLACEHOLDER" # Replace this with the ECR repo for this SAM container pipeline.
        ImagePullCredentialsType: "SERVICE_ROLE"
        Type: "LINUX_CONTAINER"
      Source:
        Type: "NO_SOURCE"
        BuildSpec: !Sub |
          version: 0.2

          env:
            variables:
              WORK_DIR: /home/k6/scripts
              TEST_SCRIPT: test.js
              TEST_REPORT_DIR: results
              PROFILE: smoke
              SCENARIO: all
              BACKEND_STACK_NAME: demo-sam-app
              FRONTEND_STACK_NAME: node-app
            parameter-store:
              APP_PASSWORD: "/perfTest/testUserPassword"
              AUTH_APP_KEY: "/perfTest/authAppKey"

          phases:
            pre_build:
              commands:
                - mkdir -p "$TEST_REPORT_DIR"
            build:
              commands:
                - |
                  echo "Importing output from $BACKEND_STACK_NAME"
                - |
                  aws cloudformation describe-stacks --stack-name "$BACKEND_STACK_NAME" --region "${AWS::Region}" --query 'Stacks[0].Outputs[].{key: OutputKey, value: OutputValue}' --output text > cf-output.txt
                - |
                  eval $(awk '{ printf("export CFN_%s=\"%s\"\n", $1, $2) }' cf-output.txt)
                - |
                  echo "Importing output from $FRONTEND_STACK_NAME"
                - |
                  aws cloudformation describe-stacks --stack-name "$FRONTEND_STACK_NAME" --region "${AWS::Region}" --query 'Stacks[0].Outputs[].{key: OutputKey, value: OutputValue}' --output text > cf-output.txt
                - |
                  eval $(awk '{ printf("export CFN_%s=\"%s\"\n", $1, $2) }' cf-output.txt)
                - echo Run performance test
                - k6 run $WORK_DIR/$TEST_SCRIPT --out json=$TEST_REPORT_DIR/report.json
            post_build:
              commands:
                - echo Performance test complete

      Tags:
        - Key: "Name"
          Value: !Join
            - "-"
            - - !Ref AWS::StackName
              - "LoadTestCodeBuildProject"
        - Key: "Service"
          Value: "ci/cd"
        - Key: "Source"
          Value: "alphagov/di-accounts-performance"


Outputs:
  PerformanceRoleArn:
    Description: "The RoleArn for performance testers to trigger CodeBuild tests."
    Value: !Ref CodeBuildServiceRole
